{
  "name": "operaton/dmn-evaluator",
  "description": "WordPress Gravity Forms DMN Evaluator Plugin with Comprehensive Testing",
  "require-dev": {
    "phpunit/phpunit": "^9.5",
    "yoast/phpunit-polyfills": "^1.0",
    "squizlabs/php_codesniffer": "^3.7",
    "wp-coding-standards/wpcs": "^3.2",
    "dealerdirect/phpcodesniffer-composer-installer": "^1.1",
    "guzzlehttp/guzzle": "^7.9"
  },
  "scripts": {
    "_comment_basic": "=== BASIC TEST COMMANDS ===",
    "test": "phpunit tests/",
    "test:unit": "phpunit tests/unit/",
    "test:integration": "phpunit tests/integration/",
    "test:all": "phpunit tests/ --log-junit junit.xml",
    "_comment_ci": "=== CI/CD PIPELINE COMMANDS (FIXED) ===",
    "test:ci": "phpunit tests/unit/ tests/fixtures/ tests/helpers/ --log-junit junit.xml",
    "test:ci-safe": "phpunit tests/unit/ --log-junit junit.xml",
    "ci": "composer run test:ci && composer run security",
    "ci:full": "composer run test:all && composer run quality",
    "ci:integration": "composer run test:all && composer run quality",
    "_comment_comprehensive": "=== COMPREHENSIVE TEST SUITE ===",
    "test:comprehensive": "bash scripts/run-comprehensive-tests.sh",
    "test:quick": "bash scripts/run-comprehensive-tests.sh --no-integration",
    "test:full": "bash scripts/run-comprehensive-tests.sh --load",
    "test:extreme": "bash scripts/run-comprehensive-tests.sh --load --chaos",
    "_comment_specific": "=== SPECIFIC TEST COMPONENTS ===",
    "test:api": "phpunit tests/integration/RestApiIntegrationTest.php",
    "test:api:verbose": "phpunit tests/integration/RestApiIntegrationTest.php --verbose",
    "test:mock": "phpunit tests/unit/MockServiceTest.php",
    "test:performance": "phpunit tests/unit/PerformanceTest.php",
    "test:security": "phpunit tests/unit/SecurityTest.php",
    "_comment_mock": "=== MOCK SERVICE UTILITIES ===",
    "mock:demo": "php -r \"require_once 'tests/fixtures/ExtendedMockDmnService.php'; require_once 'tests/helpers/MockServiceTestHelper.php'; use Operaton\\DMN\\Tests\\Helpers\\MockServiceTestHelper; \\$helper = new MockServiceTestHelper(); \\$report = \\$helper->generateTestReport(); echo json_encode(\\$report, JSON_PRETTY_PRINT);\"",
    "mock:test": "composer run test:mock",
    "_comment_quality": "=== CODE QUALITY & LINTING ===",
    "lint": "vendor/bin/phpcs --standard=PSR12 includes/ operaton-dmn-plugin.php",
    "lint:fix": "vendor/bin/phpcbf --standard=PSR12 includes/ operaton-dmn-plugin.php || echo 'Auto-fixed what was possible'",
    "lint:summary": "vendor/bin/phpcs --standard=PSR12 --report=summary includes/ operaton-dmn-plugin.php || true",
    "lint:detailed": "vendor/bin/phpcs --standard=PSR12 includes/ operaton-dmn-plugin.php || true",
    "format": "composer run lint:fix && composer run lint:summary",
    "_comment_security": "=== SECURITY & AUDITING ===",
    "security": "composer audit",
    "audit": "composer audit",
    "quality": "composer run lint:summary && composer run security",
    "quality:strict": "composer run lint && composer run security",
    "_comment_hooks": "=== PRE-COMMIT HOOKS MANAGEMENT ===",
    "hooks:enable": "bash scripts/hooks/manage-hooks.sh enable",
    "hooks:disable": "bash scripts/hooks/manage-hooks.sh disable",
    "hooks:status": "bash scripts/hooks/manage-hooks.sh status",
    "hooks:test": "bash scripts/hooks/manage-hooks.sh test",
    "hooks:setup": "bash scripts/hooks/setup-precommit-hooks.sh",
    "_comment_workflow": "=== DEVELOPMENT WORKFLOW ALIASES ===",
    "dev": "composer run test:quick",
    "check": "composer run test:comprehensive && composer run quality",
    "pre-commit": "composer run test:quick && composer run lint:summary",
    "pre-release": "composer run test:full && composer run quality:strict",
    "_comment_env": "=== ENVIRONMENT-SPECIFIC COMMANDS ===",
    "development": "composer run test:quick",
    "staging": "composer run test:full",
    "production": "composer run test:comprehensive"
  },
  "autoload-dev": {
    "psr-4": {
      "Operaton\\DMN\\Tests\\": "tests/"
    }
  },
  "config": {
    "allow-plugins": {
      "dealerdirect/phpcodesniffer-composer-installer": true
    }
  }
}
